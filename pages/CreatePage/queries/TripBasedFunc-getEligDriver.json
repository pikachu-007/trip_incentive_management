{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "getEligDriver",
    "fullyQualifiedName": "TripBasedFunc.getEligDriver",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "CreatePage",
    "collectionId": "CreatePage_TripBasedFunc",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "() =>{\n\t\t\n\t\tif(appsmith.store.driver_id_files){\n\t\t\tlet driver_ids = appsmith.store.driver_id_files.split(\"base64,\")[1]\n\t\t\tlet data=  atob(driver_ids).split(/\\r\\n|\\n/);\n\t\t\tlet driver_id_index =  data[0].split(',').findIndex( (ele)=> { return ele ==\"driver_id\" })\n\t\t\tlet result_ids = []\n\t\t\tif(driver_id_index == -1){\n\t\t\t\treturn storeValue(\"not_elig_driver_data\", \"NOT_PROPER_CSV\");\n\t\t\t}\n\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\t let id = data[i].split(',')[driver_id_index]\n\t\t\t\t if(id != null){\n\t\t\t\t\tresult_ids.push(parseInt(id));    \n\t\t\t\t }\n\t\t\t}\n\t\t\tlet city_id =PayoutCampaignForm.formData.city_id;\n\t\t\tlet vehicle_id = PayoutCampaignForm.formData.vehicle_id;\n\t\n\t\t\tif(typeof(result_ids) == \"undefined\" || typeof(city_id) == \"undefined\"  || typeof(vehicle_id) == \"undefined\" ){\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\t\n\t\t\tlet elements = result_ids;\n\t\t\tconst duplicateElements = elements.filter((item, index) => elements.indexOf(item) !== index)\n\t\t\tstoreValue(\"duplicate_elements\",duplicateElements);\n\t\t\t\n\t\t\treturn EligibleDriver.run(\n\t\t\t\t{\"city_id\": city_id,\"vehicle_id\": vehicle_id, \"result_ids\":result_ids.join(',')}\n\t\t\t).then(() =>{\n\t\t\t\t\n\t\t \t\tconst query_data = EligibleDriver.data;\n\t\t\t\tif ( query_data.length > 0){\n\t\t\t\t\tconst elig_driver_data = query_data.map(data => data.id);\n\t\t\t\t\tlet not_elig_driver_data = result_ids.filter( x => !elig_driver_data.includes(x) ); \n\t\t\t\t\treturn storeValue(\"not_elig_driver_data\", not_elig_driver_data);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn storeValue(\"not_elig_driver_data\", result_ids);\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\t\t\n\t}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": false
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "() =>{\n\t\t\n\t\tif(appsmith.store.driver_id_files){\n\t\t\tlet driver_ids = appsmith.store.driver_id_files.split(\"base64,\")[1]\n\t\t\tlet data=  atob(driver_ids).split(/\\r\\n|\\n/);\n\t\t\tlet driver_id_index =  data[0].split(',').findIndex( (ele)=> { return ele ==\"driver_id\" })\n\t\t\tlet result_ids = []\n\t\t\tif(driver_id_index == -1){\n\t\t\t\treturn storeValue(\"not_elig_driver_data\", \"NOT_PROPER_CSV\");\n\t\t\t}\n\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\t let id = data[i].split(',')[driver_id_index]\n\t\t\t\t if(id != null){\n\t\t\t\t\tresult_ids.push(parseInt(id));    \n\t\t\t\t }\n\t\t\t}\n\t\t\tlet city_id =PayoutCampaignForm.formData.city_id;\n\t\t\tlet vehicle_id = PayoutCampaignForm.formData.vehicle_id;\n\t\n\t\t\tif(typeof(result_ids) == \"undefined\" || typeof(city_id) == \"undefined\"  || typeof(vehicle_id) == \"undefined\" ){\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\t\n\t\t\tlet elements = result_ids;\n\t\t\tconst duplicateElements = elements.filter((item, index) => elements.indexOf(item) !== index)\n\t\t\tstoreValue(\"duplicate_elements\",duplicateElements);\n\t\t\t\n\t\t\treturn EligibleDriver.run(\n\t\t\t\t{\"city_id\": city_id,\"vehicle_id\": vehicle_id, \"result_ids\":result_ids.join(',')}\n\t\t\t).then(() =>{\n\t\t\t\t\n\t\t \t\tconst query_data = EligibleDriver.data;\n\t\t\t\tif ( query_data.length > 0){\n\t\t\t\t\tconst elig_driver_data = query_data.map(data => data.id);\n\t\t\t\t\tlet not_elig_driver_data = result_ids.filter( x => !elig_driver_data.includes(x) ); \n\t\t\t\t\treturn storeValue(\"not_elig_driver_data\", not_elig_driver_data);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn storeValue(\"not_elig_driver_data\", result_ids);\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\t\t\n\t}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "CreatePage_TripBasedFunc.getEligDriver",
  "deleted": false,
  "gitSyncId": "62beac9f435d8712d96d75d8_63372f2cc776a5220eb0e3eb"
}