{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "getEligDriver",
    "fullyQualifiedName": "TripBasedFunc.getEligDriver",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "CreatePage",
    "collectionId": "CreatePage_TripBasedFunc",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "() => {\n  if (appsmith.store.driver_id_files) {\n    let driver_ids = appsmith.store.driver_id_files.split(\"base64,\")[1];\n    let data = atob(driver_ids).split(/\\r\\n|\\n/);\n    let driver_id_index = data[0].split(',').findIndex(ele => {\n      return ele == \"driver_id\";\n    });\n    let result_ids = [];\n    if (driver_id_index == -1) {\n      return storeValue(\"not_elig_driver_data\", \"NOT_PROPER_CSV\");\n    }\n    for (let i = 1; i < data.length; i++) {\n      let id = data[i].split(',')[driver_id_index];\n      if (id != null) {\n        result_ids.push(parseInt(id));\n      }\n    }\n    let city_id = PayoutCampaignForm.formData.city_id;\n    let vehicle_id = PayoutCampaignForm.formData.vehicle_id;\n    if (typeof result_ids == \"undefined\" || typeof city_id == \"undefined\" || typeof vehicle_id == \"undefined\") {\n      return;\n    }\n    let elements = result_ids;\n    const duplicateElements = elements.filter((item, index) => elements.indexOf(item) !== index);\n    storeValue(\"duplicate_elements\", duplicateElements);\n    return EligibleDriver.run({\n      \"city_id\": city_id,\n      \"vehicle_id\": vehicle_id,\n      \"result_ids\": result_ids.join(',')\n    }).then(() => {\n      const query_data = EligibleDriver.data;\n      if (query_data.length > 0) {\n        const elig_driver_data = query_data.map(data => data.id);\n        let not_elig_driver_data = result_ids.filter(x => !elig_driver_data.includes(x));\n        return storeValue(\"not_elig_driver_data\", not_elig_driver_data);\n      } else {\n        return storeValue(\"not_elig_driver_data\", result_ids);\n      }\n    });\n  }\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": false
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "() => {\n  if (appsmith.store.driver_id_files) {\n    let driver_ids = appsmith.store.driver_id_files.split(\"base64,\")[1];\n    let data = atob(driver_ids).split(/\\r\\n|\\n/);\n    let driver_id_index = data[0].split(',').findIndex(ele => {\n      return ele == \"driver_id\";\n    });\n    let result_ids = [];\n    if (driver_id_index == -1) {\n      return storeValue(\"not_elig_driver_data\", \"NOT_PROPER_CSV\");\n    }\n    for (let i = 1; i < data.length; i++) {\n      let id = data[i].split(',')[driver_id_index];\n      if (id != null) {\n        result_ids.push(parseInt(id));\n      }\n    }\n    let city_id = PayoutCampaignForm.formData.city_id;\n    let vehicle_id = PayoutCampaignForm.formData.vehicle_id;\n    if (typeof result_ids == \"undefined\" || typeof city_id == \"undefined\" || typeof vehicle_id == \"undefined\") {\n      return;\n    }\n    let elements = result_ids;\n    const duplicateElements = elements.filter((item, index) => elements.indexOf(item) !== index);\n    storeValue(\"duplicate_elements\", duplicateElements);\n    return EligibleDriver.run({\n      \"city_id\": city_id,\n      \"vehicle_id\": vehicle_id,\n      \"result_ids\": result_ids.join(',')\n    }).then(() => {\n      const query_data = EligibleDriver.data;\n      if (query_data.length > 0) {\n        const elig_driver_data = query_data.map(data => data.id);\n        let not_elig_driver_data = result_ids.filter(x => !elig_driver_data.includes(x));\n        return storeValue(\"not_elig_driver_data\", not_elig_driver_data);\n      } else {\n        return storeValue(\"not_elig_driver_data\", result_ids);\n      }\n    });\n  }\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "CreatePage_TripBasedFunc.getEligDriver",
  "deleted": false,
  "gitSyncId": "62beac9f435d8712d96d75d8_63372f2cc776a5220eb0e3eb"
}