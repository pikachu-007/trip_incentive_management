{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "getCampaignConfig",
    "fullyQualifiedName": "CampaignConfigData.getCampaignConfig",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "ListingPage",
    "collectionId": "ListingPage_CampaignConfigData",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "() => {\n\t\tlet geo_regions = GeoRegion.data;\n\t\tlet vehicles_data = VehicleTypeData.data;\n\t\tlet payout_campaign = CampaignConfig.data;\n\t\tpayout_campaign.map(function(config){\n\t\t\t let geo_name = geo_regions.filter(d => d.id == config['geo_region_id'])\n\t\t\t config['city'] =  typeof geo_name[0] != 'undefined' ? geo_name[0].name : \"Not Defined\";\n\t\t\t let vehicle_type_arr = [];\n\t\t\t if(config['vehicles'].length !=0){\n\t\t\t\t vehicle_type_arr = config['vehicles'].map( (veh)=>vehicles_data.filter(d => d.id == veh)[0])\n\t\t\t }\n\t\t\t \n\t\t\t let driver_vehicle_type_arr = [];\n\t\t\t if(config['driver_vehicles'] != null && config['driver_vehicles'].length !=0){\n\t\t\t\t driver_vehicle_type_arr = config['driver_vehicles'].map( (veh)=>vehicles_data.filter(d => d.id == veh)[0])\n\t\t\t }\n\t\t\t \n\t\t\tconfig['vehicles_name'] =  vehicle_type_arr.reduce( (result, element) => {\n\t\t\t\tif(typeof element != 'undefined')\n\t\t\t\t\t\tresult.push(element.vehicle_type);\n\t\t\t\treturn result;\n\t\t\t}, []);\n\t\t\t\n\t\t\tconfig['driver_vehicles_name'] =  driver_vehicle_type_arr.reduce( (result, element) => {\n\t\t\t\tif(typeof element != 'undefined')\n\t\t\t\t\t\tresult.push(element.vehicle_type);\n\t\t\t\treturn result;\n\t\t\t}, []);\n\t\t\t \n\t\t\n\t\t\t \n\t\t\t return config;\n\t\t})\n\n\t\treturn payout_campaign;\n\t\t\n\t\t \n\t}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": false
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "() => {\n\t\tlet geo_regions = GeoRegion.data;\n\t\tlet vehicles_data = VehicleTypeData.data;\n\t\tlet payout_campaign = CampaignConfig.data;\n\t\tpayout_campaign.map(function(config){\n\t\t\t let geo_name = geo_regions.filter(d => d.id == config['geo_region_id'])\n\t\t\t config['city'] =  typeof geo_name[0] != 'undefined' ? geo_name[0].name : \"Not Defined\";\n\t\t\t let vehicle_type_arr = [];\n\t\t\t if(config['vehicles'].length !=0){\n\t\t\t\t vehicle_type_arr = config['vehicles'].map( (veh)=>vehicles_data.filter(d => d.id == veh)[0])\n\t\t\t }\n\t\t\t \n\t\t\t let driver_vehicle_type_arr = [];\n\t\t\t if(config['driver_vehicles'] != null && config['driver_vehicles'].length !=0){\n\t\t\t\t driver_vehicle_type_arr = config['driver_vehicles'].map( (veh)=>vehicles_data.filter(d => d.id == veh)[0])\n\t\t\t }\n\t\t\t \n\t\t\tconfig['vehicles_name'] =  vehicle_type_arr.reduce( (result, element) => {\n\t\t\t\tif(typeof element != 'undefined')\n\t\t\t\t\t\tresult.push(element.vehicle_type);\n\t\t\t\treturn result;\n\t\t\t}, []);\n\t\t\t\n\t\t\tconfig['driver_vehicles_name'] =  driver_vehicle_type_arr.reduce( (result, element) => {\n\t\t\t\tif(typeof element != 'undefined')\n\t\t\t\t\t\tresult.push(element.vehicle_type);\n\t\t\t\treturn result;\n\t\t\t}, []);\n\t\t\t \n\t\t\n\t\t\t \n\t\t\t return config;\n\t\t})\n\n\t\treturn payout_campaign;\n\t\t\n\t\t \n\t}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "ListingPage_CampaignConfigData.getCampaignConfig",
  "deleted": false,
  "gitSyncId": "6260fd83d030f71edbd113b0_6261012ad030f71edbd113c4"
}