{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "getCampaignConfig",
    "fullyQualifiedName": "CampaignConfigData.getCampaignConfig",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "ListingPage",
    "collectionId": "ListingPage_CampaignConfigData",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "() => {\n  let geo_regions = GeoRegion.data;\n  let vehicles_data = VehicleTypeData.data;\n  let payout_campaign = CampaignConfig.data;\n  payout_campaign.map(function (config) {\n    let geo_name = geo_regions.filter(d => d.id == config['geo_region_id']);\n    config['city'] = typeof geo_name[0] != 'undefined' ? geo_name[0].name : \"Not Defined\";\n    let vehicle_type_arr = [];\n    if (config['vehicles'].length != 0) {\n      vehicle_type_arr = config['vehicles'].map(veh => vehicles_data.filter(d => d.id == veh)[0]);\n    }\n    let driver_vehicle_type_arr = [];\n    if (config['driver_vehicles'] != null && config['driver_vehicles'].length != 0) {\n      driver_vehicle_type_arr = config['driver_vehicles'].map(veh => vehicles_data.filter(d => d.id == veh)[0]);\n    }\n    config['vehicles_name'] = vehicle_type_arr.reduce((result, element) => {\n      if (typeof element != 'undefined') result.push(element.vehicle_type);\n      return result;\n    }, []);\n    config['driver_vehicles_name'] = driver_vehicle_type_arr.reduce((result, element) => {\n      if (typeof element != 'undefined') result.push(element.vehicle_type);\n      return result;\n    }, []);\n    return config;\n  });\n  return payout_campaign;\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": false
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "() => {\n  let geo_regions = GeoRegion.data;\n  let vehicles_data = VehicleTypeData.data;\n  let payout_campaign = CampaignConfig.data;\n  payout_campaign.map(function (config) {\n    let geo_name = geo_regions.filter(d => d.id == config['geo_region_id']);\n    config['city'] = typeof geo_name[0] != 'undefined' ? geo_name[0].name : \"Not Defined\";\n    let vehicle_type_arr = [];\n    if (config['vehicles'].length != 0) {\n      vehicle_type_arr = config['vehicles'].map(veh => vehicles_data.filter(d => d.id == veh)[0]);\n    }\n    let driver_vehicle_type_arr = [];\n    if (config['driver_vehicles'] != null && config['driver_vehicles'].length != 0) {\n      driver_vehicle_type_arr = config['driver_vehicles'].map(veh => vehicles_data.filter(d => d.id == veh)[0]);\n    }\n    config['vehicles_name'] = vehicle_type_arr.reduce((result, element) => {\n      if (typeof element != 'undefined') result.push(element.vehicle_type);\n      return result;\n    }, []);\n    config['driver_vehicles_name'] = driver_vehicle_type_arr.reduce((result, element) => {\n      if (typeof element != 'undefined') result.push(element.vehicle_type);\n      return result;\n    }, []);\n    return config;\n  });\n  return payout_campaign;\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "ListingPage_CampaignConfigData.getCampaignConfig",
  "deleted": false,
  "gitSyncId": "6260fd83d030f71edbd113b0_6261012ad030f71edbd113c4"
}